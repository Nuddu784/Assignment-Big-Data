1. Write a function that stutters a word as if someone is struggling to read it. 
The first two letters are repeated twice with an ellipsis ... and space after each, and then the word is
pronounced with a question mark ?. Examples stutter('incredible') ➞ 'in... in... incredible?'
stutter('enthusiastic') ➞ 'en... en... enthusiastic?' stutter('outstanding') ➞ 'ou... ou... outstanding?


def stutter(word):
    stuttered_word = word[:2] + '... ' + word[:2] + '... ' + word + '?'
    return stuttered_word

print(stutter('incredible'))    
print(stutter('enthusiastic'))  
print(stutter('outstanding')) 


2. Create a function that takes an angle in radians and returns the corresponding angle in degrees rounded to one 
decimal place

import math

def radians_to_degrees(angle_rad):
    angle_deg = math.degrees(angle_rad)
    return round(angle_deg, 1)
 example:
angle_rad = 2.35619
angle_deg = radians_to_degrees(angle_rad)
print(angle_deg)

3. In this challenge, establish if a given integer num is a Curzon number.
 If 1 plus 2 elevated to num is exactly divisible by 1 plus 2 multiplied by num, then num is a Curzon number. 
Given a non-negative integer num, implement a function that returns True if num is a Curzon number, or False otherwise.

def is_curzon_number(num):
    numerator = 2 ** num + 1
    denominator = 2 * num + 1
    return numerator % denominator == 0

 for example:

print(is_curzon_number(5)) 
print(is_curzon_number(10))  
print(is_curzon_number(2)) 

4. Given the side length x find the area of a hexagon.

import math

def calculate_hexagon_area(side_length):
    area = (3 * math.sqrt(3) * side_length**2) / 2
    return area

# Example
side_length = 5
hexagon_area = calculate_hexagon_area(side_length)
print("The area of the hexagon is:", hexagon_area)

5. Create a function that returns a base-2 (binary) representation of a base-10 (decimal) string number.
 To convert is simple: ((2) means base-2 and (10) means base-10) 010101001(2) = 1 + 8 + 32 + 128.

def decimal_to_binary(decimal):
    decimal = int(decimal)
    binary = ''
    if decimal == 0:
        return '0'
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal //= 2
    return binary
For example:
decimal_number = "42"
binary_number = decimal_to_binary(decimal_number)
print(binary_number)  # Output: 101010


