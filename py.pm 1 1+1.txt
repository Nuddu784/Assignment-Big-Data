1. Write a Python program to Extract Unique values dictionary values?

def extract_unique_values(dictionary):
    unique_values = set()

    for values in dictionary.values():
        if isinstance(values, list):
            unique_values.update(values)
        else:
            unique_values.add(values)

    return list(unique_values)


# Example usage:
my_dictionary = {
    'key1': [1, 2, 3],
    'key2': [2, 3, 4],
    'key3': [3, 4, 5],
    'key4': 4,
    'key5': 5
}

unique_values = extract_unique_values(my_dictionary)
print(unique_values)


2. Write a Python program to find the sum of all items in a dictionary?


def sum_dict_values(dictionary):
    return sum(dictionary.values())

# Example usage
my_dict = {'a': 10, 'b': 20, 'c': 30}
result = sum_dict_values(my_dict)
print("Sum of dictionary values:", result)

 3. Write a Python program to Merging two Dictionaries?

def merge_dicts(dict1, dict2):
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict

# Example usage
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

merged_dict = merge_dicts(dict1, dict2)
print(merged_dict)

Output:
{'a': 1, 'b': 2, 'c': 3, 'd': 4}


4. Write a Python program to convert key-values list to flat dictionary?

def convert_to_flat_dictionary(key_value_list):
    flat_dict = {}
    for key, value in key_value_list:
        if isinstance(value, dict):
            nested_dict = convert_to_flat_dictionary(value.items())
            for nested_key, nested_value in nested_dict.items():
                flat_dict[f"{key}.{nested_key}"] = nested_value
        else:
            flat_dict[key] = value
    return flat_dict

# Example 
key_values = [("a", 1), ("b", 2), ("c.d", 3), ("c.e.f", 4)]
flat_dictionary = convert_to_flat_dictionary(key_values)
print(flat_dictionary)


Output:
{'a': 1, 'b': 2, 'c.d': 3, 'c.e.f': 4}


5. Write a Python program to insertion at the beginning in OrderedDict?"

from collections import OrderedDict

def insert_at_beginning(ordered_dict, key, value):
    ordered_dict[key] = value
    ordered_dict.move_to_end(key, last=False)

# Create an OrderedDict
ordered_dict = OrderedDict([('a', 1), ('b', 2), ('c', 3)])

print("Before Insertion:")
print(ordered_dict)

# Insert element at the beginning
insert_at_beginning(ordered_dict, 'x', 10)

print("\nAfter Insertion:")
print(ordered_dict)



6. Write a Python program to check order of character in string using OrderedDict()


from collections import OrderedDict

def check_order_of_characters(string, pattern):
    # Create an ordered dictionary to store the characters and their positions
    char_positions = OrderedDict()

    # Iterate through the string and store the positions of the characters
    for index, char in enumerate(string):
        char_positions.setdefault(char, []).append(index)

    # Check the order of the characters in the pattern
    previous_index = -1
    for char in pattern:
        if char in char_positions:
            indices = char_positions[char]
            if indices[0] > previous_index:
                previous_index = indices[0]
                indices.pop(0)
            else:
                return False
        else:
            return False

    return True

# Example usage
string = "Hello World"
pattern = "Helo"
result = check_order_of_characters(string, pattern)
print(f"Characters in '{pattern}' appear in the same order in '{string}': {result}")


7. Write a Python program to sort Python Dictionaries by Key or Value?

def sort_dict(dictionary, by_key=True):
    if by_key:
        sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[0]))
    else:
        sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1]))
    
    return sorted_dict


# Example 
my_dict = {'b': 2, 'a': 1, 'd': 4, 'c': 3}
print("Original dictionary:", my_dict)

# Sort by key
sorted_by_key = sort_dict(my_dict)
print("Sorted by key:", sorted_by_key)

# Sort by value
sorted_by_value = sort_dict(my_dict, by_key=False)
print("Sorted by value:", sorted_by_value)



