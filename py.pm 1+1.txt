1. Write a Python program to Extract Unique values dictionary values?

def get_unique_values(dictionary):
    unique_values = set()
    for values in dictionary.values():
        if isinstance(values, list):
            unique_values.update(values)
        else:
            unique_values.add(values)
    return unique_values


# Example usage:
my_dict = {
    'key1': 'value1',
    'key2': 'value2',
    'key3': 'value2',
    'key4': [1, 2, 3, 3, 4, 5],
    'key5': [3, 4, 4, 5, 6],
}

unique_values = get_unique_values(my_dict)
print(unique_values)


2. Write a Python program to find the sum of all items in a dictionary?

def calculate_sum(dictionary):
    total_sum = sum(dictionary.values())
    return total_sum

# Example dictionary
my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40}

# Calculate the sum
result = calculate_sum(my_dict)

# Print the result
print("The sum of all items in the dictionary is:", result)

 3. Write a Python program to Merging two Dictionaries?

def merge_dictionaries(dict1, dict2):
    merged_dict = dict1.copy()  # Make a copy of dict1 to preserve its original content
    merged_dict.update(dict2)  # Update merged_dict with the key-value pairs from dict2
    return merged_dict

# Example usage:
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

merged_dict = merge_dictionaries(dict1, dict2)
print(merged_dict)

4. Write a Python program to convert key-values list to flat dictionary?

def convert_to_flat_dict(kv_list):
    flat_dict = {}
    for pair in kv_list:
        key, value = pair
        if isinstance(value, dict):
            nested_dict = convert_to_flat_dict(value.items())
            for nested_key, nested_value in nested_dict.items():
                flat_dict[f"{key}.{nested_key}"] = nested_value
        else:
            flat_dict[key] = value
    return flat_dict


# Example usage:
key_values = [("name", "John"), ("age", 25), ("address", {"city": "New York", "zip": 12345})]
flat_dict = convert_to_flat_dict(key_values)
print(flat_dict)


 5. Write a Python program to insertion at the beginning in OrderedDict?

from collections import OrderedDict

def insert_at_beginning(ordered_dict, key, value):
    ordered_dict.update({key: value})
    ordered_dict.move_to_end(key, last=False)

# Create an OrderedDict
my_dict = OrderedDict([('A', 1), ('B', 2), ('C', 3)])

print("Before insertion:")
print(my_dict)

# Insert a new item at the beginning
insert_at_beginning(my_dict, 'X', 10)

print("After insertion:")
print(my_dict)

7. Write a Python program to sort Python Dictionaries by Key or Value?

def sort_dict_by_key(dictionary):
    sorted_dict = dict(sorted(dictionary.items()))
    return sorted_dict

def sort_dict_by_value(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1]))
    return sorted_dict

# Example dictionary
my_dict = {'c': 3, 'a': 1, 'b': 2}

# Sort dictionary by key
sorted_by_key = sort_dict_by_key(my_dict)
print("Sorted by key:", sorted_by_key)

# Sort dictionary by value
sorted_by_value = sort_dict_by_value(my_dict)
print("Sorted by value:", sorted_by_value)

